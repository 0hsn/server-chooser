{% extends 'base.html.twig' %}

{% block body %}
  <div class="container"
       x-data="initState()"
       x-init="">
    <section id="sc-filter">
      <div class="row">
        <h1 class="mt-5 pb-3">Server chooser</h1>
        <p><a @click="window.location.href = webUrl" href="javascript:void()">Reset filter</a></p>
      </div>
      <div class="row">
        <div class="col-6 col-sm-6">
          <div class="mb-3">
            <!-- https://stackoverflow.com/questions/10004723/html5-input-type-range-show-range-value -->
            <label for="storage" class="form-label">Storage [&le; <strong x-text="storageSliderValues[storageSliderPoint]" ></strong>]</label>
            <input type="range" class="form-range" min="0" max="10" step="1" x-model="storageSliderPoint" id="storage">
          </div>
        </div>
        <div class="col-6 col-sm-2">
          <div class="mb-3">
            <label for="hdd-type" class="form-label">Harddisk type</label>
            <select x-model="selectedHddType" class="form-select form-control" aria-label="Default select example" id="hdd-type">
              <option value="NIL">Select value</option>
              <template x-for="hdt in hddType" :key="hdt">
                <option :value="hdt" x-text="hdt" :selected="hdt === selectedHddType"></option>
              </template>
            </select>

          </div>
        </div>

        <!-- Force next columns to break to new line at md breakpoint and up -->
        <div class="w-100 d-none d-md-block"></div>

        <div class="col-6 col-sm-6">
          <div class="mb-3">
            <div class="row">
              <template x-for="ramSize in ramSizes" :key="ramSize">
                <div class="col-2">
                  <div class="form-check">
                    <input x-model="selectedRamSize" class="form-check-input" type="checkbox" :value="ramSize" :id="`ram-${ramSize}`">
                    <label class="form-check-label" :for="`ram-${ramSize}`" x-text="ramSize"></label>
                  </div>
                </div>
              </template>
            </div>
          </div>

        </div>
        <div class="col-6 col-sm-2">
          <div class="mb-3">
            <label for="location" class="form-label">Location</label>
            <select x-model="selectedLocation" class="form-select form-control" id="location">
              <option value="NIL">Select a location</option>
              <template x-for="loc in Object.keys(locations)" :key="loc">
                <option :value="loc" x-text="locations[loc]" :selected="loc === selectedLocation"></option>
              </template>
            </select>

          </div>

        </div>
      </div>
      <div class="row">
        <div class="col-6 col-sm-6">
          <div class="mb-3">
            <button type="button" class="btn btn-primary mb-3" @click="applyFilter()">Apply filters</button>
          </div>
        </div>
      </div>
    </section>

    <section id="sc-body">
      <div class="w-75 mb-3">
        <template x-if="Object.keys(servers).length != 0">
          <span><strong x-text="servers.meta.total"></strong> results in total</span>
        </template>
      </div>

      <template x-if="Object.keys(servers).length != 0">
        <template x-for="server in servers.data">
          <div class="card w-75 mb-3">
            <div class="card-body">
              <h5 class="card-title" x-text="server.Model"></h5>
              <p class="card-text">Ram: <strong x-text="server.RAM"></strong>, HDD: <strong x-text="server.HDD"></strong>, Location: <strong x-text="server.Location"></strong></p>
              <h6 class="card-title"  x-text="server.Price"></h6>
            </div>
          </div>
        </template>
      </template>

      <template x-if="Object.keys(servers).length == 0">
        <div class="card w-75 mb-3">
          <div class="card-body">
            <h5 class="card-title">No matching result found.</h5>
            <p class="card-text">Please do another search.</p>
          </div>
        </div>
      </template>

      <template x-if="Object.keys(servers).length != 0">
        <div class="w-75 mb-3">
          <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-end">
              <li class="page-item" :class="{'disabled': servers.meta.current_page === 1}">
                <a class="page-link" @click="applyPage(1)">1</a>
              </li>
              <li class="page-item" :class="{'disabled': servers.meta.prev_page === null}">
                <a class="page-link" @click="applyPage(servers.meta.prev_page)">&laquo;</a>
              </li>
              <li class="page-item" :class="{'disabled': servers.meta.next_page === null}">
                <a class="page-link" @click="applyPage(servers.meta.next_page)">&raquo;</a>
              </li>
              <li class="page-item" :class="{'disabled': servers.meta.current_page === servers.meta.last_page}">
                <a class="page-link" @click="applyPage(servers.meta.last_page)" x-text="servers.meta.last_page"></a>
              </li>
            </ul>
          </nav>
        </div>
      </template>
    </section>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
  <script>
    function initState() {
      return {
        apiUrl: 'http://127.0.0.1:8000/api/servers',
        webUrl: 'http://127.0.0.1:8000',
        servers: {},
        hddType: {{ hdd_type|json_encode|raw }},
        selectedHddType: 'NIL',

        locations: {{ locations|json_encode|raw }},
        selectedLocation: 'NIL',

        ramSizes: {{ ram_sizes|json_encode|raw }},
        selectedRamSize: [],

        storageSliderPoint: 10,
        storageSliderValues: {{ storage_slider_values|json_encode|raw }},

        init() {
          const urlParams = new URLSearchParams(window.location.search)

          this.selectedHddType = urlParams.get('hdd_type') ?? 'NIL'
          this.selectedLocation = urlParams.get('location') ?? 'NIL'
          this.storageSliderPoint = this.storageSliderValues.indexOf(urlParams.get('storage_under') ?? '72TB')
          this.selectedRamSize = urlParams.get('ram_size') ? urlParams.get('ram_size').split(',') : []


          console.log(this.apiUrl + window.location.search)
          fetch(this.apiUrl + window.location.search)
            .then(response => response.text())
            .then(data => {
              this.servers = JSON.parse(data)
              console.log(data)
            })
        },

        applyFilter() {
          const urlParams = new URLSearchParams(window.location.search)

          if (this.selectedHddType !== "NIL") {
            urlParams.set('hdd_type', this.selectedHddType)
          } else {
            urlParams.delete('hdd_type')
          }

          if (this.selectedLocation !== "NIL") {
            urlParams.set('location', this.selectedLocation)
          } else {
            urlParams.delete('location')
          }

          if (this.selectedRamSize.length > 0) {
            for (index in this.selectedRamSize) {
              urlParams.set('ram_size', this.selectedRamSize.join(','))
            }
          } else {
            urlParams.delete('ram_size')
          }

          if (this.storageSliderPoint !== 0) {
            urlParams.set('storage_under', this.storageSliderValues[this.storageSliderPoint])
          }

          window.location.href = this.webUrl + '?' + urlParams.toString()
        },

        applyPage(pageNum) {
          const urlParams = new URLSearchParams(window.location.search)

          if (pageNum !== null) {
            urlParams.set('page', pageNum)
          } else {
            urlParams.delete('page')
          }

          window.location.href = this.webUrl + '?' + urlParams.toString()
        }
      }
    }
  </script>
{% endblock %}